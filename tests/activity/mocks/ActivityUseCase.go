// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	activitys "github.com/Risuii/models/activitys"

	mock "github.com/stretchr/testify/mock"

	response "github.com/Risuii/helpers/response"
)

// ActivityUseCase is an autogenerated mock type for the ActivityUseCase type
type ActivityUseCase struct {
	mock.Mock
}

// AddActivity provides a mock function with given fields: ctx, userID, params
func (_m *ActivityUseCase) AddActivity(ctx context.Context, userID int64, params activitys.Activity) response.Response {
	ret := _m.Called(ctx, userID, params)

	var r0 response.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, activitys.Activity) response.Response); ok {
		r0 = rf(ctx, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(response.Response)
		}
	}

	return r0
}

// DeleteActivity provides a mock function with given fields: ctx, id, userID
func (_m *ActivityUseCase) DeleteActivity(ctx context.Context, id int64, userID int64) response.Response {
	ret := _m.Called(ctx, id, userID)

	var r0 response.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) response.Response); ok {
		r0 = rf(ctx, id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(response.Response)
		}
	}

	return r0
}

// Riwayat provides a mock function with given fields: ctx, userID, params
func (_m *ActivityUseCase) Riwayat(ctx context.Context, userID int64, params activitys.DateReq) response.Response {
	ret := _m.Called(ctx, userID, params)

	var r0 response.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, activitys.DateReq) response.Response); ok {
		r0 = rf(ctx, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(response.Response)
		}
	}

	return r0
}

// UpdateActivity provides a mock function with given fields: ctx, id, userID, params
func (_m *ActivityUseCase) UpdateActivity(ctx context.Context, id int64, userID int64, params activitys.Activity) response.Response {
	ret := _m.Called(ctx, id, userID, params)

	var r0 response.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, activitys.Activity) response.Response); ok {
		r0 = rf(ctx, id, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(response.Response)
		}
	}

	return r0
}

type mockConstructorTestingTNewActivityUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewActivityUseCase creates a new instance of ActivityUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewActivityUseCase(t mockConstructorTestingTNewActivityUseCase) *ActivityUseCase {
	mock := &ActivityUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
