// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	absensis "github.com/Risuii/models/absensis"

	mock "github.com/stretchr/testify/mock"
)

// AbsensiRepository is an autogenerated mock type for the AbsensiRepository type
type AbsensiRepository struct {
	mock.Mock
}

// Checkin provides a mock function with given fields: ctx, params
func (_m *AbsensiRepository) Checkin(ctx context.Context, params absensis.Absensi) (int64, error) {
	ret := _m.Called(ctx, params)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, absensis.Absensi) int64); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, absensis.Absensi) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Checkout provides a mock function with given fields: ctx, checkinID, params
func (_m *AbsensiRepository) Checkout(ctx context.Context, checkinID int64, params absensis.Absensi) error {
	ret := _m.Called(ctx, checkinID, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, absensis.Absensi) error); ok {
		r0 = rf(ctx, checkinID, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReceiveMsg provides a mock function with given fields:
func (_m *AbsensiRepository) ReceiveMsg() (absensis.Absensi, error) {
	ret := _m.Called()

	var r0 absensis.Absensi
	if rf, ok := ret.Get(0).(func() absensis.Absensi); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(absensis.Absensi)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Riwayat provides a mock function with given fields: ctx, name
func (_m *AbsensiRepository) Riwayat(ctx context.Context, name string) ([]absensis.Absensi, error) {
	ret := _m.Called(ctx, name)

	var r0 []absensis.Absensi
	if rf, ok := ret.Get(0).(func(context.Context, string) []absensis.Absensi); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]absensis.Absensi)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMsg provides a mock function with given fields: ctx, params
func (_m *AbsensiRepository) SendMsg(ctx context.Context, params absensis.Absensi) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, absensis.Absensi) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAbsensiRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAbsensiRepository creates a new instance of AbsensiRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAbsensiRepository(t mockConstructorTestingTNewAbsensiRepository) *AbsensiRepository {
	mock := &AbsensiRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
